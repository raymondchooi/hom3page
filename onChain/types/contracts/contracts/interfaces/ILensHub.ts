/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace Types {
  export type CommentParamsStruct = {
    profileId: BigNumberish;
    contentURI: string;
    pointedProfileId: BigNumberish;
    pointedPubId: BigNumberish;
    referrerProfileIds: BigNumberish[];
    referrerPubIds: BigNumberish[];
    referenceModuleData: BytesLike;
    actionModules: AddressLike[];
    actionModulesInitDatas: BytesLike[];
    referenceModule: AddressLike;
    referenceModuleInitData: BytesLike;
  };

  export type CommentParamsStructOutput = [
    profileId: bigint,
    contentURI: string,
    pointedProfileId: bigint,
    pointedPubId: bigint,
    referrerProfileIds: bigint[],
    referrerPubIds: bigint[],
    referenceModuleData: string,
    actionModules: string[],
    actionModulesInitDatas: string[],
    referenceModule: string,
    referenceModuleInitData: string
  ] & {
    profileId: bigint;
    contentURI: string;
    pointedProfileId: bigint;
    pointedPubId: bigint;
    referrerProfileIds: bigint[];
    referrerPubIds: bigint[];
    referenceModuleData: string;
    actionModules: string[];
    actionModulesInitDatas: string[];
    referenceModule: string;
    referenceModuleInitData: string;
  };

  export type CreateProfileParamsStruct = {
    to: AddressLike;
    followModule: AddressLike;
    followModuleInitData: BytesLike;
  };

  export type CreateProfileParamsStructOutput = [
    to: string,
    followModule: string,
    followModuleInitData: string
  ] & { to: string; followModule: string; followModuleInitData: string };

  export type EIP712SignatureStruct = {
    signer: AddressLike;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
    deadline: BigNumberish;
  };

  export type EIP712SignatureStructOutput = [
    signer: string,
    v: bigint,
    r: string,
    s: string,
    deadline: bigint
  ] & { signer: string; v: bigint; r: string; s: string; deadline: bigint };

  export type ProfileStruct = {
    pubCount: BigNumberish;
    followModule: AddressLike;
    followNFT: AddressLike;
    __DEPRECATED__handle: string;
    __DEPRECATED__imageURI: string;
    __DEPRECATED__followNFTURI: string;
    metadataURI: string;
  };

  export type ProfileStructOutput = [
    pubCount: bigint,
    followModule: string,
    followNFT: string,
    __DEPRECATED__handle: string,
    __DEPRECATED__imageURI: string,
    __DEPRECATED__followNFTURI: string,
    metadataURI: string
  ] & {
    pubCount: bigint;
    followModule: string;
    followNFT: string;
    __DEPRECATED__handle: string;
    __DEPRECATED__imageURI: string;
    __DEPRECATED__followNFTURI: string;
    metadataURI: string;
  };

  export type PublicationMemoryStruct = {
    pointedProfileId: BigNumberish;
    pointedPubId: BigNumberish;
    contentURI: string;
    referenceModule: AddressLike;
    __DEPRECATED__collectModule: AddressLike;
    __DEPRECATED__collectNFT: AddressLike;
    pubType: BigNumberish;
    rootProfileId: BigNumberish;
    rootPubId: BigNumberish;
  };

  export type PublicationMemoryStructOutput = [
    pointedProfileId: bigint,
    pointedPubId: bigint,
    contentURI: string,
    referenceModule: string,
    __DEPRECATED__collectModule: string,
    __DEPRECATED__collectNFT: string,
    pubType: bigint,
    rootProfileId: bigint,
    rootPubId: bigint
  ] & {
    pointedProfileId: bigint;
    pointedPubId: bigint;
    contentURI: string;
    referenceModule: string;
    __DEPRECATED__collectModule: string;
    __DEPRECATED__collectNFT: string;
    pubType: bigint;
    rootProfileId: bigint;
    rootPubId: bigint;
  };

  export type MirrorParamsStruct = {
    profileId: BigNumberish;
    metadataURI: string;
    pointedProfileId: BigNumberish;
    pointedPubId: BigNumberish;
    referrerProfileIds: BigNumberish[];
    referrerPubIds: BigNumberish[];
    referenceModuleData: BytesLike;
  };

  export type MirrorParamsStructOutput = [
    profileId: bigint,
    metadataURI: string,
    pointedProfileId: bigint,
    pointedPubId: bigint,
    referrerProfileIds: bigint[],
    referrerPubIds: bigint[],
    referenceModuleData: string
  ] & {
    profileId: bigint;
    metadataURI: string;
    pointedProfileId: bigint;
    pointedPubId: bigint;
    referrerProfileIds: bigint[];
    referrerPubIds: bigint[];
    referenceModuleData: string;
  };

  export type PostParamsStruct = {
    profileId: BigNumberish;
    contentURI: string;
    actionModules: AddressLike[];
    actionModulesInitDatas: BytesLike[];
    referenceModule: AddressLike;
    referenceModuleInitData: BytesLike;
  };

  export type PostParamsStructOutput = [
    profileId: bigint,
    contentURI: string,
    actionModules: string[],
    actionModulesInitDatas: string[],
    referenceModule: string,
    referenceModuleInitData: string
  ] & {
    profileId: bigint;
    contentURI: string;
    actionModules: string[];
    actionModulesInitDatas: string[];
    referenceModule: string;
    referenceModuleInitData: string;
  };

  export type QuoteParamsStruct = {
    profileId: BigNumberish;
    contentURI: string;
    pointedProfileId: BigNumberish;
    pointedPubId: BigNumberish;
    referrerProfileIds: BigNumberish[];
    referrerPubIds: BigNumberish[];
    referenceModuleData: BytesLike;
    actionModules: AddressLike[];
    actionModulesInitDatas: BytesLike[];
    referenceModule: AddressLike;
    referenceModuleInitData: BytesLike;
  };

  export type QuoteParamsStructOutput = [
    profileId: bigint,
    contentURI: string,
    pointedProfileId: bigint,
    pointedPubId: bigint,
    referrerProfileIds: bigint[],
    referrerPubIds: bigint[],
    referenceModuleData: string,
    actionModules: string[],
    actionModulesInitDatas: string[],
    referenceModule: string,
    referenceModuleInitData: string
  ] & {
    profileId: bigint;
    contentURI: string;
    pointedProfileId: bigint;
    pointedPubId: bigint;
    referrerProfileIds: bigint[];
    referrerPubIds: bigint[];
    referenceModuleData: string;
    actionModules: string[];
    actionModulesInitDatas: string[];
    referenceModule: string;
    referenceModuleInitData: string;
  };
}

export interface ILensHubInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balanceOf"
      | "comment"
      | "createProfile"
      | "follow"
      | "followWithSig"
      | "getContentURI"
      | "getProfile"
      | "getPublication"
      | "isFollowing"
      | "mirror"
      | "mirrorWithSig"
      | "ownerOf"
      | "post"
      | "postWithSig"
      | "quote"
      | "quoteWithSig"
      | "setProfileMetadataURI"
      | "setProfileMetadataURIWithSig"
      | "tokenURI"
      | "unfollow"
      | "unfollowWithSig"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "comment",
    values: [Types.CommentParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createProfile",
    values: [Types.CreateProfileParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "follow",
    values: [BigNumberish, BigNumberish[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "followWithSig",
    values: [
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      BytesLike[],
      Types.EIP712SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getContentURI",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfile",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublication",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isFollowing",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mirror",
    values: [Types.MirrorParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mirrorWithSig",
    values: [Types.MirrorParamsStruct, Types.EIP712SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "post",
    values: [Types.PostParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "postWithSig",
    values: [Types.PostParamsStruct, Types.EIP712SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [Types.QuoteParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteWithSig",
    values: [Types.QuoteParamsStruct, Types.EIP712SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfileMetadataURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfileMetadataURIWithSig",
    values: [BigNumberish, string, Types.EIP712SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unfollow",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unfollowWithSig",
    values: [BigNumberish, BigNumberish[], Types.EIP712SignatureStruct]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "comment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "follow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "followWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContentURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProfile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPublication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFollowing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mirror", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mirrorWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "post", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfileMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfileMetadataURIWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unfollow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unfollowWithSig",
    data: BytesLike
  ): Result;
}

export interface ILensHub extends BaseContract {
  connect(runner?: ContractRunner | null): ILensHub;
  waitForDeployment(): Promise<this>;

  interface: ILensHubInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balanceOf: TypedContractMethod<[owner_: AddressLike], [bigint], "nonpayable">;

  comment: TypedContractMethod<
    [commentParams: Types.CommentParamsStruct],
    [void],
    "nonpayable"
  >;

  createProfile: TypedContractMethod<
    [createProfileParams: Types.CreateProfileParamsStruct],
    [bigint],
    "nonpayable"
  >;

  follow: TypedContractMethod<
    [
      followerProfileId: BigNumberish,
      idsOfProfilesToFollow: BigNumberish[],
      followTokenIds: BigNumberish[],
      datas: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  followWithSig: TypedContractMethod<
    [
      followerProfileId: BigNumberish,
      idsOfProfilesToFollow: BigNumberish[],
      followTokenIds: BigNumberish[],
      datas: BytesLike[],
      signature: Types.EIP712SignatureStruct
    ],
    [void],
    "nonpayable"
  >;

  getContentURI: TypedContractMethod<
    [profileId: BigNumberish, pubId: BigNumberish],
    [string],
    "view"
  >;

  getProfile: TypedContractMethod<
    [profileId: BigNumberish],
    [Types.ProfileStructOutput],
    "view"
  >;

  getPublication: TypedContractMethod<
    [profileId: BigNumberish, pubId: BigNumberish],
    [Types.PublicationMemoryStructOutput],
    "view"
  >;

  isFollowing: TypedContractMethod<
    [followerProfileId: BigNumberish, followedProfileId: BigNumberish],
    [boolean],
    "view"
  >;

  mirror: TypedContractMethod<
    [mirrorParams: Types.MirrorParamsStruct],
    [void],
    "nonpayable"
  >;

  mirrorWithSig: TypedContractMethod<
    [
      mirrorParams: Types.MirrorParamsStruct,
      signature: Types.EIP712SignatureStruct
    ],
    [void],
    "nonpayable"
  >;

  ownerOf: TypedContractMethod<
    [tokenId_: BigNumberish],
    [string],
    "nonpayable"
  >;

  post: TypedContractMethod<
    [postParams: Types.PostParamsStruct],
    [bigint],
    "nonpayable"
  >;

  postWithSig: TypedContractMethod<
    [
      postParams: Types.PostParamsStruct,
      signature: Types.EIP712SignatureStruct
    ],
    [void],
    "nonpayable"
  >;

  quote: TypedContractMethod<
    [quoteParams: Types.QuoteParamsStruct],
    [void],
    "nonpayable"
  >;

  quoteWithSig: TypedContractMethod<
    [
      quoteParams: Types.QuoteParamsStruct,
      signature: Types.EIP712SignatureStruct
    ],
    [void],
    "nonpayable"
  >;

  setProfileMetadataURI: TypedContractMethod<
    [profileId: BigNumberish, metadataURI: string],
    [void],
    "nonpayable"
  >;

  setProfileMetadataURIWithSig: TypedContractMethod<
    [
      profileId: BigNumberish,
      metadataURI: string,
      signature: Types.EIP712SignatureStruct
    ],
    [void],
    "nonpayable"
  >;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  unfollow: TypedContractMethod<
    [
      unfollowerProfileId: BigNumberish,
      idsOfProfilesToUnfollow: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  unfollowWithSig: TypedContractMethod<
    [
      unfollowerProfileId: BigNumberish,
      idsOfProfilesToUnfollow: BigNumberish[],
      signature: Types.EIP712SignatureStruct
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner_: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "comment"
  ): TypedContractMethod<
    [commentParams: Types.CommentParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createProfile"
  ): TypedContractMethod<
    [createProfileParams: Types.CreateProfileParamsStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "follow"
  ): TypedContractMethod<
    [
      followerProfileId: BigNumberish,
      idsOfProfilesToFollow: BigNumberish[],
      followTokenIds: BigNumberish[],
      datas: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "followWithSig"
  ): TypedContractMethod<
    [
      followerProfileId: BigNumberish,
      idsOfProfilesToFollow: BigNumberish[],
      followTokenIds: BigNumberish[],
      datas: BytesLike[],
      signature: Types.EIP712SignatureStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getContentURI"
  ): TypedContractMethod<
    [profileId: BigNumberish, pubId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProfile"
  ): TypedContractMethod<
    [profileId: BigNumberish],
    [Types.ProfileStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPublication"
  ): TypedContractMethod<
    [profileId: BigNumberish, pubId: BigNumberish],
    [Types.PublicationMemoryStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isFollowing"
  ): TypedContractMethod<
    [followerProfileId: BigNumberish, followedProfileId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "mirror"
  ): TypedContractMethod<
    [mirrorParams: Types.MirrorParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mirrorWithSig"
  ): TypedContractMethod<
    [
      mirrorParams: Types.MirrorParamsStruct,
      signature: Types.EIP712SignatureStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId_: BigNumberish], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "post"
  ): TypedContractMethod<
    [postParams: Types.PostParamsStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "postWithSig"
  ): TypedContractMethod<
    [
      postParams: Types.PostParamsStruct,
      signature: Types.EIP712SignatureStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "quote"
  ): TypedContractMethod<
    [quoteParams: Types.QuoteParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "quoteWithSig"
  ): TypedContractMethod<
    [
      quoteParams: Types.QuoteParamsStruct,
      signature: Types.EIP712SignatureStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProfileMetadataURI"
  ): TypedContractMethod<
    [profileId: BigNumberish, metadataURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProfileMetadataURIWithSig"
  ): TypedContractMethod<
    [
      profileId: BigNumberish,
      metadataURI: string,
      signature: Types.EIP712SignatureStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "unfollow"
  ): TypedContractMethod<
    [
      unfollowerProfileId: BigNumberish,
      idsOfProfilesToUnfollow: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unfollowWithSig"
  ): TypedContractMethod<
    [
      unfollowerProfileId: BigNumberish,
      idsOfProfilesToUnfollow: BigNumberish[],
      signature: Types.EIP712SignatureStruct
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
